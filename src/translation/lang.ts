import { createProxy } from "share/utils/getPath";

export type Lang = Readonly<{
  _common: {
    codes: {
      "0": string;
      "400": string;
      "401": string;
      "404": string;
      "500": string;
      AUTH: string;
    };
  };
  _validations: {
    componentsNotInOutputMode: string;
    inputPassword: string;
    inputUsername: string;
    nodeHandoverIsBeingAccepted: string;
    nodeHandoverIsBeingCancelled: string;
    nodeHandoverIsBeingRefused: string;
    number: string;
    positiveNumber: string;
    required: string;
    requiredAdress: string;
    requiredAttachmentsCount: string;
    requiredBody: string;
    requiredFileMark: string;
    requiredFilePlan: string;
    requiredFormDocument: string;
    requiredListCount: string;
    requiredOwner: string;
    requiredPid: string;
    requiredRetentionMode: string;
    requiredSender: string;
    requiredSettleMethod: string;
    requiredSsid: string;
    requiredSubject: string;
    requiredDateFrom: string;
    requiredDays: string;
  };
  comments: {
    add: string;
    label: string;
  };
  dashboard: {
    documentDigitization: string;
    isfgYoutubeChannel: string;
    moveYourKnowledge: string;
    technicalSupport: string;
    toNewLevel: string;
    usersManual: string;
  };
  dialog: {
    buttons: {
      confirm: string;
      finish: string;
    };
    content: {
      cancelDiscard: string;
      deleteOrganizationUnit: string;
      cancelShipmentSending: string;
      changeToA: string;
      changeToS: string;
      conceptToDocument: string;
      confirmHandoverBack: string;
      deactivateUser: string;
      dispatchPublishShipment: string;
      incompleteText: string;
      notRegisterQuestion: string;
      recoverDialogQuestion: string;
      resendShipment: string;
      returnToRepository: string;
      signingInProgress: string;
      submitToRepository: string;
      takeOutFromFile: string;
      unsavedChanges: string;
    };
    form: {
      cancel: string;
      close: string;
      confirm: string;
      dontSave: string;
      edit: string;
      notReadable: string;
      notRegister: string;
      register: string;
      registerAndRefer: string;
      save: string;
      saveAndRefer: string;
      sections: {
        attachments: string;
      };
      toRegister: string;
      toRegisterAndRefer: string;
    };
    handover: {
      organizationlUnit: string;
      worker: string;
    };
    notifications: {
      actionFailed: string;
      actionSucceeded: string;
      autosaveSucceeded: string;
      autosaveFailed: string;
      componentDownloadIsPreparing: string;
      componentDeleteOneOrMoreFailed: string;
      componentUploadWasSuccessful: string;
      componentUploadFailed: string;
      createUserFailed: string;
      createUserSucceeded: string;
      deactivateUserFailed: string;
      deactivateUserSucceeded: string;
      notFoundAnyRepositories: string;
      notReferred: string;
      notRegistered: string;
      notRegisteredAndReferred: string;
      referred: string;
      refreshSucceeded: string;
      registered: string;
      registeredAndReferred: string;
      somethingFailed: string;
      cancelFailed: string;
      cancelSucceeded: string;
      createOrganizationUnitSuccess: string;
      createOrganizationUnitFailed: string;
      updateOrganizationUnitSuccess: string;
      updateOrganizationUnitFailed: string;
      updateUserFailed: string;
      updateUserSucceeded: string;
      deleteOrganizationUnitSuccess: string;
      deleteOrganizationUnitFailed: string;
    };
    renameComponent: {
      name: string;
    };
    tabs: {
      components: string;
      content: string;
      history: string;
      metadata: string;
      notes: string;
      processOrClose: string;
      renditions: string;
      saveAndDiscard: string;
      settle: string;
      shipment: string;
      transactionProtocol: string;
      version: string;
    };
    title: {
      acceptedDocument: string;
      analogDocumentIncome: string;
      borrow: string;
      cancelProcessing: string;
      convertToOutputFormat: string;
      changePassword: string;
      closed: string;
      conceptDetails: string;
      contactTheSender: string;
      changeToA: string;
      changeToS: string;
      databoxDetails: string;
      declineHandover: string;
      deleteOrganizationUnit: string;
      digitalDocumentIncome: string;
      dispatchShipment: string;
      documentDetail: string;
      dontRegister: string;
      emailDetails: string;
      fileDetail: string;
      forSignature: string;
      handover: string;
      handoverBack: string;
      handoverShipmentsToDispatch: string;
      openFile: string;
      promoteConceptToDocument: string;
      renameComponent: string;
      resendShipment: string;
      returnDocumentForRework: string;
      sendShipments: string;
      settle: string;
      shipmentDetail: string;
      signatureRequest: string;
      signing: string;
      submitToRepository: string;
      shreddingDiscard: string;
      takingOutFromFile: string;
      unsavedChanges: string;
    };
    errors: {
      dateFutureOnly: string;
      datePastOnly: string;
      incorrectFormat: string;
      invalidEmailFormat: string;
      max: string;
      maxLen: string;
      min: string;
      minLen: string;
      newPasswordsAreNotEqual: string;
      newPasswordCannotBeTheSame: string;
      noOptions: string;
      numberOnly: string;
      passwordsAreNotEqual: string;
      timePastOnly: string;
      wrongFormat: string;
    };
  };
  documentMetaForm: {
    description: string;
    CDCount: string;
    deliveryDate: string;
    deliveryMode: string;
    serialNumber: string;
    form: string;
    openSheetCount: string;
    settleDate: string;
    pid: string;
    ssid: string;
    sender: string;
    senderIdent: string;
    senderSSID: string;
    listCount: string;
    subject: string;
    USBCount: string;
    volumesCount: string;
  };
  enums: {
    deliveryMode: {
      currier: string;
      databox: string;
      email: string;
      personally: string;
      post: string;
      publish: string;
      takeover: string;
    };
    documentState: {
      cancelled: string;
      closed: string;
      notSettled: string;
      referedToArchive: string;
      referedToRepository: string;
      settled: string;
      shredded: string;
    };
    fileMetaTypes: {
      deliveryNote: string;
      enclosure: string;
      main: string;
      meta: string;
      signature: string;
      signatureVerificationProtocol: string;
    };
    postType: {
      cashOnDelivery: string;
      deliveryReport: string;
      dontPrologPeriod: string;
      dontPutInPostbox: string;
      dontPrologCollectionPeriod: string;
      dontReturnPutInPostbox: string;
      dontReturn: string;
      dontSend: string;
      dontStore: string;
      fee: string;
      firstClass: string;
      fragile: string;
      price: string;
      prolongCollectionPeriod1month: string;
      reduceCollectionPeriod3days: string;
      reduceCollectionPeriod10days: string;
      reduceCollectionPeriod1month: string;
      replyMails: string;
      restrictedDelivery: string;
      restrictedDeliveryExplicitly: string;
      subscriptionBasic: string;
      subscriptionSpecial: string;
      payout: string;
      unstorable: string;
      unstorableII: string;
      other: string;
    };
    postItemType: {
      businessLetter: string;
      businessParcel: string;
      insuredLetter: string;
      insuredParcel: string;
      ordinaryLetter: string;
      ordinaryLetterStandard: string;
      ordinaryMailForTheBlind: string;
      ordinaryParcel: string;
      other: string;
      registeredMail: string;
      registeredMailStandard: string;
      registeredMailForTheBlind: string;
      internationalBusinessLetter: string;
      internationalBusinessParcel: string;
      internationalInsuredLetter: string;
      internationalInsuredParcel: string;
      internationalOrdinaryMail: string;
      internationalOrdinaryMailForTheBlind: string;
      internationalParcelStandard: string;
      internationalRegisteredMail: string;
      internationalRegisteredMailForTheBlind: string;
    };
    settleMethod: {
      document: string;
      documentNote: string;
      forward: string;
      takeIntoAccount: string;
      other: string;
    };
  };
  errorBoundary: {
    closeAndOpenDialog: string;
    defaultMessage: string;
    error: string;
    globalError: string;
    goToLogin: string;
    loadContent: string;
    loadingFailed: string;
    reload: string;
    reloadDialogTab: string;
  };
  general: {
    active: string;
    add: string;
    addConcept: string;
    addOrganizationUnit: string;
    address: string;
    addressee: string;
    addressState: string;
    addressStreet: string;
    addUser: string;
    admin: string;
    analog: string;
    assume: string;
    attachments: string;
    attachmentsCount: string;
    attachmentsType: string;
    authorOfTheChange: string;
    bookmark: string;
    bookmarkRemove: string;
    borrow: string;
    borrowDate: string;
    borrower: string;
    cancel: string;
    cancelDate: string;
    cancelDiscard: string;
    canceled: string;
    cancelProcessing: string;
    cancelProcessingReason: string;
    cancelReason: string;
    cancelSending: string;
    cancelShipment: string;
    cashOnDeliveryPrice: string;
    CDCount: string;
    convertReason: string;
    changeBy: string;
    changeDate: string;
    changeDateVersion: string;
    changeDescription: string;
    changeFileMark: string;
    changeGroup: string;
    changeToA: string;
    changeToS: string;
    city: string;
    closing: string;
    closureDate: string;
    contact: string;
    conversion: string;
    createdDateAndTime: string;
    createdShipments: string;
    createShipment: string;
    createOrganizationUnit: string;
    updateOrganizationUnit: string;
    createShreddingProposal: string;
    createUser: string;
    creationDate: string;
    currier: string;
    damaged: string;
    databox: string;
    dateAndTimeSafe: string;
    dateFrom: string;
    dateOfCreation: string;
    dateOfEvidence: string;
    dateOfRetention: string;
    dateTo: string;
    daysCount: string;
    deactivate: string;
    decisionDA: string;
    declineReason: string;
    delete: string;
    deleteShipment: string;
    delivery: string;
    deliveryDate: string;
    deliveryDateAndTime: string;
    deliveryMode: string;
    deliveryTime: string;
    description: string;
    digital: string;
    discardFromShredding: string;
    discardTill: string;
    discardReason: string;
    dispatch: string;
    dispatchByPublishing: string;
    dispatchDate: string;
    dispatchedDate: string;
    documentAuthor: string;
    documentsCount: string;
    documentState: string;
    download: string;
    editOrganizationUnit: string;
    editStorageLocation: string;
    editUser: string;
    electronicSeal: string;
    email: string;
    emailAddress: string;
    emailAddressee: string;
    emailOfTheSender: string;
    empowerment: string;
    erase: string;
    eraseDate: string;
    eventType: string;
    existingFile: string;
    fileClosureDate: string;
    fileIdentificator: string;
    fileMark: string;
    fileOpenReason: string;
    filePlan: string;
    fileState: string;
    find: string;
    firstName: string;
    forbidFictionDelivery: string;
    form: string;
    forSignatureDate: string;
    foundConfirmation: string;
    foundingDate: string;
    giveBack: string;
    giveNext: string;
    group: string;
    handOVer: string;
    hybrid: string;
    id: string;
    idDR: string;
    identifier: string;
    inputTitleOrLabelOrId: string;
    isDispatch: string;
    isDispatchBig: string;
    isMailroom: string;
    isRepository: string;
    isRepositoryBig: string;
    justification: string;
    lastName: string;
    lastReadDate: string;
    lawNumber: string;
    letter: string;
    listCount: string;
    listCountAttachments: string;
    lock: string;
    lostDate: string;
    lostReason: string;
    mainGroup: string;
    mainOrganizationalUnit: string;
    manageShipments: string;
    messageBody: string;
    municipality: string;
    name: string;
    nameOfRetentionProposal: string;
    nameSurname: string;
    narration: string;
    newFile: string;
    newPassword: string;
    newPassword2: string;
    nextOwner: string;
    no: string;
    note: string;
    notRegister: string;
    notRegisterReason: string;
    notValid: string;
    oldPassword: string;
    open: string;
    openSheetCount: string;
    orgAddress: string;
    orgName: string;
    orgUnit: string;
    originalDestinationHandover: string;
    originalDispatchDate: string;
    owner: string;
    ownHands: string;
    paragraph: string;
    passedFrom: string;
    passwordAgain: string;
    pasteToFile: string;
    personally: string;
    pid: string;
    post: string;
    postItemId: string;
    postItemNumber: string;
    postItemPrice: string;
    postItemType: string;
    postItemTypeOther: string;
    postType: string;
    postTypeOther: string;
    print: string;
    printEnvelopes: string;
    printInventoryDocuments: string;
    printPostSheet: string;
    publish: string;
    readable: string;
    reasonForCancel: string;
    reasonForNotRegister: string;
    reasonForRecover: string;
    reasonForReturn: string;
    recipient: string;
    recipientDataboxId: string;
    referenceNumber: string;
    refreshEmails: string;
    refreshMessages: string;
    refreshPendingTableText: string;
    refuse: string;
    register: string;
    remove: string;
    removeOrganizationUnit: string;
    rename: string;
    repositoryName: string;
    requestDate: string;
    resend: string;
    restore: string;
    retentionMode: string;
    return: string;
    returnedForReworkDate: string;
    returnedShipmentsFromDispatch: string;
    returnForRework: string;
    returnShipment: string;
    revertVersion: string;
    save: string;
    search: string;
    send: string;
    sender: string;
    senderIdent: string;
    senderIndividualPerson: string;
    senderJob: string;
    senderLegalPerson: string;
    senderOwn: string;
    senderRegistrationNumber: string;
    senderSSID: string;
    sendFromDatabox: string;
    sendFromEmail: string;
    sendMode: string;
    sendTodispatchAgain: string;
    serialNumber: string;
    settle: string;
    customSettleMethod: string;
    settleDate: string;
    settleDateAndTime: string;
    settleMethod: string;
    settleReason: string;
    settleTime: string;
    settleToDate: string;
    showDetails: string;
    showPreview: string;
    showShipment: string;
    shreddingDate: string;
    signAndTimeStamp: string;
    signedAuthor: string;
    signedDate: string;
    signInOrgGroup: string;
    sip: string;
    sipForArchive: string;
    size: string;
    ssid: string;
    state: string;
    storageLocation: string;
    streetAndStreetNumber: string;
    subject: string;
    takeover: string;
    takeOutFromFile: string;
    targetRecipient: string;
    toApprove: string;
    toDispatchDate: string;
    toDocument: string;
    toHands: string;
    toOwnHands: string;
    toPublish: string;
    toRegistry: string;
    toSign: string;
    totalSize: string;
    type: string;
    typeOfDelivery: string;
    unclassified: string;
    uploadAttachments: string;
    uploadNewVersion: string;
    USBCount: string;
    userOrgId: string;
    userId: string;
    versionAuthor: string;
    versionId: string;
    volumesCount: string;
    weight: string;
    year: string;
    yearOfShredding: string;
    yes: string;
    zipCode: string;
    processor: string;
    triggerActionId: string;
    triggerActionYear: string;
    toRepositoryDate: string;
    toArchiveShreddingDate: string;
    location: string;
    borrowReturnDate: string;
    shreddingYear: string;
    shreddingResolution: string;
    idDA: string;
    modifiedAtOfVersion: string;
    convertToOutputFormat: string;
    repository: string;
  };
  login: {
    checking: string;
    error: string;
    loginFailed: string;
    logoAlt: string;
    password: string;
    rememberMe: string;
    signUp: string;
    username: string;
  };
  logout: {
    automaticLogout: string;
    dontLogout: string;
    error: string;
    logout: string;
    warningMinutes: string;
    warningSeconds: string;
  };
  menu: {
    items: {
      administration: string;
      analogDocument: string;
      archived: string;
      borrowed: string;
      byEmail: string;
      byHandOver: string;
      byPost: string;
      byPublishing: string;
      cancel: string;
      certificate: string;
      closed: string;
      concepts: string;
      created: string;
      dailyImprint: string;
      dataBox: string;
      dataRepository: string;
      destroyed: string;
      digitalDocument: string;
      dispatch: string;
      dispatched: string;
      dispatching: string;
      documents: string;
      emailBox: string;
      evidence: string;
      favorites: string;
      files: string;
      forProcessing: string;
      forSignature: string;
      income: string;
      lostDestroyed: string;
      mailroom: string;
      notPassed: string;
      notRegistered: string;
      open: string;
      organizationUnits: string;
      overviews: string;
      overview: string;
      processed: string;
      recordRetentionProcess: string;
      rejectedByTakeover: string;
      rented: string;
      rentedDocuments: string;
      repository: string;
      retentionProposal: string;
      retentionProtocol: string;
      returnedForRework: string;
      returnedFromDispatch: string;
      sent: string;
      signatureBook: string;
      signed: string;
      storedDocuments: string;
      storedFiles: string;
      technicalDataCarries: string;
      toDispatch: string;
      toDispose: string;
      toTakeOver: string;
      unfinished: string;
      unprocessed: string;
      users: string;
      waitingForTakeover: string;
    };
    logout: string;
    packMenu: string;
    unpackMenu: string;
  };
  modal: {
    cancel: string;
    hidePreview: string;
    showPreview: string;
  };
  nodePreview: {
    errorState: string;
    filePreview: {
      unsupportedFile: string;
      emptyFile: string;
    };
  };
  shipmentForm: {
    allowSubstDelivery: string;
    createdAt: string;
    deliveryDate: string;
    dispatchDate: string;
    dispatchedDate: string;
    dmID: string;
    fileIdentificator: string;
    legalTitleLaw: string;
    legalTitlePar: string;
    legalTitlePoint: string;
    legalTitleSect: string;
    legalTitleYear: string;
    personalDelivery: string;
    recipientDataboxID: string;
    senderDataboxID: string;
    senderIdent: string;
    senderSSID: string;
    shRef: string;
    ssid: string;
    state: string;
    toDispatchDate: string;
    toHands: string;
  };
  table: {
    archivedDocumentsFiles: string;
    borrowedDocuments: string;
    canceled: string;
    closedFiles: string;
    concepts: string;
    destroyedDocumentsFiles: string;
    dispatchingByDataRepository: string;
    dispatchingByEmail: string;
    dispatchingByHandOver: string;
    dispatchingByPost: string;
    documentsFilesForShredding: string;
    documentsFilesForTakeOver: string;
    documentsForProcessing: string;
    documentsForSignature: string;
    favoriteFiles: string;
    forSignature: string;
    lostDestroyed: string;
    noData: string;
    notPassed: string;
    notRegisteredDataboxes: string;
    notRegisteredEmails: string;
    open: string;
    openFiles: string;
    processedDocuments: string;
    rejectedTakeover: string;
    returnedDispatch: string;
    returnedRework: string;
    rowsPerPage: string;
    signedDocuments: string;
    unprocessedDataboxes: string;
    unprocessedEmails: string;
  };
}>;

export default createProxy<Lang>();
